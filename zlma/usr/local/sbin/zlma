#!/srv/venv/bin/python3
"""
zlma (z/VM and Linux modern administration) is a CMDB based on mariadb, designed to make administering z/VM and zLinux easier.
The data is stored in a mariadb database named 'zlma' in a table named 'servers'. The table has these columns:
- host_name  Short host name
- lpar       LPAR the Linux server is running on
- userid     z/VM user ID the server is running in
- ip_addr    Primary IP address
- lpar       z/VM LPAR
- userid     z/VM user ID
- cpus       Number of CPUs
- mem_gb     GB of memeory
- arch       Architecture
- os         Operating system
- os_ver     OS version
- kerr_ver   Kernel version
- kern_rel   Kernel release
- rootfs     Root file system % full
- app        Application running
- env        Environment running in (dev, test, qa, prod)
- grp        Another way of grouping servers
- owner      Owner of the server
- last_ping  Last time server was pinged or ssh'd to
- created    When the server was created 

It supports the following commands:
- init              Creates the table 'servers' in database 'zlma'
- add <SERVER>      If SERVER already exists, record is updated
- desc(ribe)        Show format of the 'servers' database
- query <PATTERN>   If no PATTERN is supllied, return all rows
- remove <SERVER>   Remove row for specified server
- update            Refresh entire database
- webdata           Return host_name, lpar, userid, ip_addr, cpus and mem_gb for web pages

Return codes:
0 - Success
1 - Error
2 - No records found 

Examples:
- zlma -v init
- zlma desc
- zlma -v add --server model1000
- zlma -v query
"""
import argparse
import datetime
import json
import logging
import mariadb
import os
import subprocess
import sys
from zlma_conf import Zlma_conf

class Zlma:
  def __init__(self):
    # create a logger that writes both to stdout and the file /var/log/zlma/zlma.log - must be R/W by Apache
    self.conf = Zlma_conf()                # configuration variables 
    self.conf.load_config_file()           # read the config file                    
    logging.basicConfig(filename='/var/log/zlma/zlma.log', format='%(asctime)s %(levelname)s %(message)s')
    self.console = logging.StreamHandler() # set up logging to console
    self.formatter = logging.Formatter('%(name)-12s: %(levelname)-8s %(message)s') # format is simpler for console use
    self.console.setFormatter(self.formatter)
    logging.getLogger('').addHandler(self.console) # add the handler to the root logger
    self.log = logging.getLogger(__name__)
    self.parser = argparse.ArgumentParser(description = "zlma - A simple Configuration Management Database")

    # set log level on the console and to log files
    self.console.setLevel(self.conf.log_level)
    self.log.setLevel(self.conf.log_level)
    self.console.setLevel(self.conf.log_level)
    self.parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
    self.parser.add_argument("-V", "--version", help="show current version", action="store_true")
    self.parser.add_argument("-C", "--copyscript", help="copy script 'zlmainfo' to target server before add", action="store_true")
    self.parser.add_argument("-c", "--column", help="column name to search", action="append")
    self.parser.add_argument("subcommand", help="Can be 'add', 'desc', 'init', 'query', 'remove' or 'update'", nargs='?')
    self.parser.add_argument("-p", "--pattern", help="pattern to search for", action="append")
    self.parser.add_argument("-s", "--server", help="server to add or remove", action="append")
    self.args = self.parser.parse_args()
    self.conn = None                       # mariadb connection
    self.cursor = None                     # mariadb cursor
    self.log.debug(f"Zlma.__init__(): user: {self.conf.user} self.args: {str(self.args)}")
    self.create_db_cmd = f"CREATE DATABASE {self.conf.db_name};"
    self.describe_cmd = "DESC servers;"
    self.delete_cmd = "DELETE FROM servers WHERE host_name = pattern;"
    self.create_table_cmd = """
      CREATE TABLE IF NOT EXISTS servers (
        host_name VARCHAR(255) NOT NULL UNIQUE,
        lpar VARCHAR(8),
        userid VARCHAR(8),
        ip_addr VARCHAR(20),
        cpus INT,
        mem_gb INT,
        arch VARCHAR(50),
        arch_com VARCHAR(50),
        os VARCHAR(100),
        os_ver VARCHAR(50), 
        kern_ver VARCHAR(100),
        kern_rel VARCHAR(50),
        rootfs INT,
        last_ping VARCHAR(50),
        created VARCHAR(50),  
        app VARCHAR(50), 
        env VARCHAR(50), 
        grp VARCHAR(50), 
        owner VARCHAR(50) 
      );
      """
    self.insert_row_cmd = """
      INSERT INTO servers (
        lpar, userid, ip_addr, cpus, mem_gb, arch, arch_com, os, os_ver, kern_ver, kern_rel, rootfs, last_ping, created, app, env, grp, owner, host_name) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      """
    self.update_row_cmd = """
      UPDATE servers 
      SET lpar = ?, userid = ?, ip_addr = ?, cpus = ?, mem_gb = ?, arch = ?, arch_com = ?, os = ?, os_ver = ?, kern_ver = ?, kern_rel = ?, rootfs = ?, last_ping = ?, created = ?
      WHERE host_name = ?
      """
    self.select_cmd = """
      SELECT * FROM servers WHERE host_name LIKE ptrn 
        OR lpar LIKE ptrn 
        OR userid LIKE ptrn 
        OR ip_addr LIKE ptrn 
        OR cpus LIKE ptrn 
        OR mem_gb LIKE ptrn 
        OR arch LIKE ptrn 
        OR arch_com LIKE ptrn 
        OR os LIKE ptrn 
        OR os_ver LIKE ptrn 
        OR kern_ver LIKE ptrn
        OR kern_rel LIKE ptrn
        OR rootfs LIKE ptrn
        OR app LIKE ptrn
        OR env LIKE ptrn
        OR grp LIKE ptrn
        OR owner LIKE ptrn;
        """
    self.select_all_cmd = "SELECT * FROM servers"
    self.select_webdata_cmd = "SELECT host_name, lpar, userid, ip_addr, cpus, mem_gb FROM servers WHERE arch='s390x'"
    self.select_host_names_cmd = "SELECT host_name FROM servers"
    self.server_data = []
    self.use_cmd = f"USE {self.conf.db_name}" 
    self.version = "24.08.21"

  def connect_to_zlma(self):   
    """
    Connect to mariadb, use datase 'zlma' and establish a cursor 
    """  
    try:
      self.conn = mariadb.connect(user=self.conf.db_user, password=self.conf.db_pw, host=self.conf.db_host, database=self.conf.db_name)   
      self.cursor = self.conn.cursor()     # open cursor
    except mariadb.Error as e:
      self.log.error(f"connect_to_zlma(): user: {self.conf.user} Exception creating database: {e}")
      print("Run 'zlma init'?")            # give a hint
      exit(3)
    
  def query_zlma(self, search_type: str):
    """
    Search CMDB for specified pattern 
    Arg 1: search_type: can be "all" or "webdata" which returns a subset of the columns
    """
    pattern = str(self.args.pattern).replace("'", "").replace("[", "").replace("]", "")
    self.log.debug(f"query_zlma(): user: {self.conf.user} self.args.pattern = {self.args.pattern}")
    cmd = ""
    if self.args.column:                 # search is based on one column
      if self.args.pattern == None:        # no pattern to search on
        self.log.error("query_zlma(): user: {self.conf.user} if COLUMN is specified there must be a search PATTERN")
        return 1
      self.log.debug(f"query_zlma(): TODO: search on args.column = {self.args.column} args.pattern = {self.args.pattern}")
      return 2 # for now
    if search_type == "webdata":
      cmd = self.select_webdata_cmd        # return subset of data for web pages
    elif self.args.pattern == None:        # no search pattern
      self.log.debug("query_zlma(): user: {self.conf.user} No search PATTERN - returning all records")
      cmd = self.select_all_cmd          # return all rows
    else:  
      cmd = self.select_cmd.replace("ptrn", "'%"+pattern+"%'") # put search pattern in query
    self.log.debug(f"query_zlma(): user: {self.conf.user} searching for '{pattern}' with command: {cmd}")
    self.connect_to_zlma() 
    rows = ""  
    try:   
      self.cursor.execute(cmd)             # query the CMDB
      rows = self.cursor.fetchall()
      if rows == []:
        self.log.debug("query_zlma(): user: {self.conf.user} No records found")
        return 2                           # no records found
      else:    
        for i in rows:
          print(*i, sep=',') 
    except mariadb.Error as e:
      self.log.warning(f"WARNING - query_zlma(): user: {self.conf.user} Exception searching database: {e}")
      return 1

  def commit_changes(self):   
    """
    Commit all SQL changes then close cursor and connection
    """ 
    try:
      self.conn.commit()                   # commit changes
    except mariadb.Error as e:
      self.log.error(f"commit_changes(): user: {self.conf.user} Exception commiting changes: {e}")
      exit(4)
    try:
      self.cursor.close()                  # close cursor
    except mariadb.Error as e:
      self.log.error(f"commit_changes(): user: {self.conf.user} Exception closing cursor: {e}")
      exit(5)
    try:
      self.conn.close()                    # close connection
    except mariadb.Error as e:
      self.log.error(f"commit_changes(): user: {self.conf.user} Exception closing connection: {e}")
      exit(6)

  def initialize(self):  
    """
    Create the Configuration Management Database with one table
    - CREATE DATABASE 'zlma'
    - USE zlma
      CREATE TABLE 'servers'
    """
    try:
      self.conn = mariadb.connect(user=self.conf.db_user, password=self.conf.db_pw, host=self.conf.db_host)   
      self.cursor = self.conn.cursor()     # open cursor
    except mariadb.Error as e:
      self.log.error(f"initialize(): user: {self.conf.user} Exception opening cursor: {e}")
    try:   
      self.cursor.execute(self.create_db_cmd) # create database 
      self.conn.commit()                   # commit changes
    except mariadb.Error as e:
      self.log.warning(f"initialize(): user: {self.conf.user} Exception creating database: {e}")
    try:   
      self.cursor.execute(self.use_cmd)   
      self.log.debug(f"initialize(): user: {self.conf.user} changed to database {self.conf.db_name}")
    except mariadb.Error as e:
      self.log.error(f"initialize(): user: {self.conf.user} error changing database: {e}")
      self.conn.close()                    # cannot continue
      exit(7)
    try:   
      self.cursor.execute(self.create_table_cmd) # create table 
      self.log.debug(f"initialize(): user: {self.conf.user} Created table 'servers'")
    except mariadb.Error as e:
      self.log.error(f"initialize(): user: {self.conf.user} error creating table 'servers': {e}")
      exit(8)
    self.commit_changes()  
  
  def ping_server(self):
    """
    Ping the server passed in with the --server option
    """
    if self.args.server == None:           # no server name specified
      self.log.error(f"ping_server(): Option '--server SERVER' must be specified with command '{self.args.command}'")
      return 1
    server = str(self.args.server[0])  
    self.log.debug(f"ping_server() user: {self.conf.user}  server = {server}")
    ping_cmd = f"ping -c1 -W 0.5 {server}" # send 1 packet, timeout after 500ms
    proc = subprocess.run(ping_cmd, shell=True, capture_output=True, text=True)
    rc = proc.returncode
    self.log.debug(f"ping_server() user: {self.conf.user} command {ping_cmd} returned {rc}")
    if rc != 0:                          # just give warning
      self.log.error(f"ping_server() user: {self.conf.user} cannot ping server: {server}")
      return 1
    else:
      return 0 

  def find_server(self, server):
    """
    Get data from a server
    - if requested, copy the script 'zlmainfo' to the target server's script directory
    - run it on the target node
    - sample output:
    model800,192.168.12.176,4,4,aarch64,Linux,Ubuntu 22.04.4 LTS,5.15.0-1053-raspi #56-Ubuntu SMP PREEMPT Mon Apr 15 18:50:10 UTC 2024
    """
    self.log.debug(f"find_server() user: {self.conf.user} server = {server}")
    if self.args.copyscript:               # copy script first
      scp_cmd = f"scp {self.conf.home_dir}/zlmainfo {server}:{self.conf.home_dir}" 
      proc = subprocess.run(scp_cmd, shell=True, capture_output=True, text=True) 
      if proc.returncode != 0:             # just give warning
        self.log.warning(f"find_server() user: {self.conf.user} command {scp_cmd} returned {proc.returncode}")
      else:
        self.log.debug(f"find_server() user: {self.conf.user} command {scp_cmd} returned {proc.returncode}")
    ssh_cmd = f"ssh -o ConnectTimeout=5 {server} {self.conf.home_dir}/zlmainfo"  # run script 'zlmainfo' and get output
    proc = subprocess.run(ssh_cmd, shell=True, capture_output=True, text=True)
    if proc.returncode != 0:               # call to 'zlmainfo' failed
      self.log.error(f"find_server() user: {self.conf.user} command {ssh_cmd} returned {proc.returncode}")
      return 1
    self.server_data = proc.stdout.split(",")
    self.log.debug(f"find_server(): user {self.conf.user} command {ssh_cmd} returncode: {proc.returncode} stdout: {self.server_data}")
    return 0

  def update_row(self, op_type: str): 
    """
    Either insert a new row or update an existing one
    op_type:
    - "insert":  INSERT a row into table 'servers' - 15 columns + 4 metadata
    - "replace": REPLACE the row - just 15 columns, no metadata
    """
    self.log.info(f"update_row() user: {self.conf.user} op_type: {op_type} server_data: {self.server_data}")
    self.connect_to_zlma()
    if op_type == "insert":                # need 3 metadata values
      self.server_data.insert(-1, "none")  # insert app just before host_name
      self.server_data.insert(-1, "none")  # insert env just before host_name
      self.server_data.insert(-1, "none")  # insert group just before host_name
      self.server_data.insert(-1, "none")  # insert owner just before host_name
      self.log.debug(f"update_row() user: {self.conf.user} server_data: {self.server_data}")
      cmd = self.insert_row_cmd            # SQL INSERT
      self.log.debug(f"update_row() user: {self.conf.user} inserting row with: {self.insert_row_cmd}")
    else:                                  # replace  
      cmd = self.update_row_cmd            # SQL UPDATE
      self.log.debug(f"update_row() user: {self.conf.user} replacing row with: {self.update_row_cmd}")
    self.log.debug(f"update_row() user: {self.conf.user} server_data: {self.server_data}")
    try: 
      self.cursor.execute(cmd, self.server_data)  
    except mariadb.Error as e:
      self.log.error(f"update_row() user: {self.conf.user} e: {e}")
      self.conn.close()                    # close connection
      return 
    self.commit_changes() 
    self.log.info(f"update_row(): user: {self.conf.user} replaced row for server {self.server_data[0]}")

  def delete_row(self):
    """
    Delete a row with a "host_name" of the specified server 
    """
    self.log.debug(f"delete_row() user: {self.conf.user} self.args.server = {self.args.server}")
    if self.args.server == None:           # no server name specified
      self.log.error("delete_row() --server SERVER must be specified with delete")
      return 1
    self.connect_to_zlma()
    server = str(self.args.server[0])  
    cmd = self.delete_cmd.replace("pattern", "'"+server+"'") # add target server in single quotes
    self.log.debug(f"delete_row()  user: {self.conf.user} cmd = {cmd}")  
    try: 
      self.cursor.execute(cmd)  
      if self.cursor.rowcount == 0:        # no matching server
        self.log.debug(f"delete_row() user: {self.conf.user} cursor.rowcount = {self.cursor.rowcount}")  
        self.log.error(f"delete_row() user: {self.conf.user} did not find server {server} in CMDB")
        return 2 
      else:   
        self.log.debug(f"delete_row() user: {self.conf.user} deleted server: {server} cursor.rowcount: {self.cursor.rowcount}")  
    except mariadb.Error as e:
      self.log.error(f"delete_row() user: {self.conf.user} error deleting row in table 'servers': {e}")
      self.conn.close()                    # close connection
      return 1    
    self.commit_changes()  
    self.log.info(f"delete_row() user: {self.conf.user} deleted row for server {server}")
  
  def describe_table(self):
    """
    Describe the 'server' table
    """
    if self.connect_to_zlma() == -1:
      self.log.error("describe_table() user: {self.conf.user} connect_to_zlma() failed")
      return -1
    try:   
      self.cursor.execute(self.describe_cmd)    # describe the table
      rows = self.cursor.fetchall()
      print("Table servers:")
      print("Field,Type,Null,Key,Default,Extra")
      print("---------------------------------")
      for i in rows:
        print(*i, sep=',') 
    except mariadb.Error as e:
      self.log.warning(f"describe_table() user: {self.conf.user} Exception searching database: {e}")
      self.conn.close()                    # cannot contiue
      return 1
    self.conn.close()                      # close connection  

  def update_zlma(self):
    """
    Update all rows in 'server' table
    """
    successes = 0
    if self.connect_to_zlma() == -1:
      self.log.debug("update_zlma() user: {self.conf.user} connect_to_zlma() failed")
      return -1
    try:   
      self.cursor.execute(self.select_host_names_cmd) # get all hostnames in table
      servers = self.cursor.fetchall()
      self.log.debug(f"update_zlma() user: {self.conf.user} servers: {servers}")
      num_servers = len(servers)
      for next_server in servers:
        next_server = str(next_server).strip("'").strip("(").strip(")").strip(",").strip("'")
        self.log.debug(f"update_zlma() user: {self.conf.user} next_server: {next_server}")
        rc = self.find_server(next_server)
        self.log.debug(f"update_zlma() user: {self.conf.user} server_data: {self.server_data}")
        if rc == 1:                        # did not get server data
          self.log.warning(f"update_zlma() user: {self.conf.user} did not get server_data for {next_server} - skipping")
          continue                         # iterate loop
        self.update_row("update")
        successes += 1                     # increment counter
      self.log.info("update_zlma() user: {self.conf.user} successfully updated table 'servers'")  
    except mariadb.Error as e:
      self.log.warning(f"update_zlma() user: {self.conf.user} Exception updating database: {e}")
      self.conn.close()                    # cannot contiue
      return 1
    self.log.info(f"update_zlma() user: {self.conf.user} {successes} of {num_servers} servers successfully updated")

  def run_command(self):
    """
    Run the command passed in
    """
    rc = 0                                 # assume success
    if self.args.version:                  # set log level to DEBUG for log file and stdout
      print(self.version)
      return 
    if self.args.verbose:                  # set log level to DEBUG for log file and stdout
      self.log.setLevel(logging.DEBUG)
      self.console.setLevel(logging.DEBUG)
    self.log.debug(f"run_command() user: {self.conf.user} subcommand = {self.args.subcommand}")
    match self.args.subcommand:
      case "init"|"initialize":
        rc = self.initialize() 
      case "add":  
        if self.args.server == None:       # no server name specified
          self.log.error("run_command() user: {self.conf.user} Option '--server SERVER' must be specified with subcommand 'add'")
          return 1
        rc = self.ping_server()
        if rc == 0:                        # server pings
          self.log.debug(f"run_command() user: {self.conf.user} server pings, calling find_server")
          rc = self.find_server(self.args.server[0])
          if rc != 0:
            self.log.error(f"run_command() user: {self.conf.user} find_server() returned {rc}")
          else:  
            rc = self.update_row("insert")
      case "describe"|"desc":
        rc = self.describe_table() 
      case "remove":
        if self.args.server == None:       # no server name specified
          self.log.error("run_command() Option '--server SERVER' must be specified with subcommand 'remove'")
          return 1
        rc = self.delete_row()  
      case "query":
        rc = self.query_zlma("all")
      case "update":
        rc = self.update_zlma()
      case "webdata":
        rc = self.query_zlma("webdata")
      case _:
        self.log.error(f"run_command() user: {self.conf.user} unrecognized subcommand {self.args.subcommand}")  
        rc = 9
    exit(rc)    

# main()
zlma = Zlma()                         # create a singleton
zlma.run_command()                    # do the work
