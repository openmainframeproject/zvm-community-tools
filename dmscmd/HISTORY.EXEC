/* HISTORY:
 
   Extract saved commands from the WAITRD CMS nucleus extension created
   by DMSCMD (if any) and either display them in a full-screen XEDIT
   screen for possible editing and stacking for re-execution, or just
   type or stack them. See label Help or issue "HISTORY ?" for details.
 
*/
   g. = ''                             /* Clear all global variables */
   g._Version = '1.0'
 
   parse source . . execname exectype execmode . env .
   if env = 'XEDIT' then signal XEDIT
   address command
   arg parms '(' options ')'
   if parms = '?' then signal Help
   if parms <> '' then signal BadParms
   if options = '' then signal FullScreen
   do while options <> ''
      parse var options option options
      select
         when abbrev('FULLSCREEN', option, 1) then g._function = ''
         when abbrev('TYPE', option, 1) then g._function = 0
         when abbrev('STACK', option, 3) then g._function = 1
         when abbrev('LIMIT', option, 1) then do
            parse var options g._limit options
            if datatype(g._limit, 'W') = 0 then signal BadLimit
         end
         when abbrev('STRING', option, 3) then do
            g._string = options
            options = ''
         end
         otherwise
         signal BadOption
      end
   end
   if g._function = '' then signal FullScreen
   call GetHistory g._string
   if g._limit = '' then g._limit = g._c.0
   do i = 1 to g._limit
      if g._c.i = '' then iterate
      if g._function then push g._c.i
      else say right(i, 3) g._c.i
   end
   exit 0
 
FullScreen:
   'EXECSTAT $HISTORY XEDIT'
   if rc <> 0 then
   'EXECLOAD' execname exectype execmode '$HISTORY XEDIT'
   if rc <> 0 & rc <> 1 then exit rc
 
   newxedit = 0
   'SUBCOM XEDIT'
   if rc = 0 then do
      address xedit 'extract /fname/ftype'
      if fname.1 = 'HISTORY' & ftype.1 = 'EXEC' then
      newxedit = 1
   end
   if newxedit then
   address command 'XEDIT HISTORY EXEC (PROFILE $HISTORY)'
   else 'XEDIT DMSCMD HELPCMS (PROFILE $HISTORY)'
   r = rc
   'EXECDROP $HISTORY XEDIT'
   exit r
 
XEDIT:
/* Display a menu screen and set variables */
   'COMMAND SET STAY ON'
   'COMMAND SET MSGLINE ON 1 22 OVERLAY'
   'COMMAND SET CMDLINE OFF'                     /* Command line off */
   'COMMAND SET CASE MIXED IGNORE'
   'COMMAND SET TOFEOF OFF'
   'COMMAND SET PREFIX OFF'
   'COMMAND SET SCALE OFF'
 
/* If you change PF/PA key definitions, change g._pfline too */
   g._pfline = 'PF1=Help PF2=Top PF3=Quit PF4=Crsr PF5=Last' ,
     ' PF7=Fwd PF8=Back PA1=CP  PA2=CMS'
   'COMMAND SET PA1 ONLY COMMAND CP'
   'COMMAND SET PA2 ONLY COMMAND CMS'
   'COMMAND SET PA3'
   'COMMAND SET MSGMODE OFF'
   'COMMAND SET PF01 ONLY COMMAND HELP CMS DMSCMD(ALL'
   'COMMAND SET PF02 ONLY TOP'                  /* Go to top of list */
   'COMMAND SET PF03 ONLY COMMAND QUIT 0'
   'COMMAND SET PF04 ONLY CURSOR'
   'COMMAND SET PF05 ONLY LAST'
   'COMMAND SET PF06'
   'COMMAND SET PF07 ONLY BACKWARD'
   'COMMAND SET PF08 ONLY FORWARD'
   'COMMAND SET PF09'
   'COMMAND SET PF10'
   'COMMAND SET PF11'
   'COMMAND SET PF12'
   'COMMAND SET PF13 ONLY COMMAND HELP CMS DMSCMD(ALL'
   'COMMAND SET PF14 ONLY TOGGLEPW'    /* Toggle password visibility */
   'COMMAND SET PF15 ONLY COMMAND QUIT 0'
   'COMMAND SET PF16 COPYKEY'
   'COMMAND SET PF17'
   'COMMAND SET PF18'
   'COMMAND SET PF19'
   'COMMAND SET PF20'
   'COMMAND SET PF21'
   'COMMAND SET PF22'
   'COMMAND SET PF23'
   'COMMAND SET PF24'
/* Next process any stacked lines on input */
   do queued()
      parse pull cline
      if cline <> '' then cline               /* Got one, execute it */
   end
   'COMMAND LOCATE :1'                            /* Goto first line */
   'COMMAND SET MSGMODE ON'
   'COMMAND EXTRACT /LSCREEN/SIZE/'       /* Get logical screen info */
 
/* Set up our highlight characters */
   'COMMAND SET CTLCHAR % ESCAPE'
   'COMMAND SET CTLCHAR p PROTECT NOHIGH'      /* Default info field */
   'COMMAND SET CTLCHAR P PROTECT HIGH'    /* Highlighted info field */
   'COMMAND SET CTLCHAR n NOPROTECT NOHIGH'    /* Normal input field */
   'COMMAND SET CTLCHAR N NOPROTECT HIGH'    /* Changed input fields */
   'COMMAND SET CTLCHAR & NOPROTECT INVISIBLE'   /* pswd input field */
   passwords = 'OFF'
 
   rline. = '%p'
 
   call GetHistory                        /* Get any history buffers */
   rlines = min(lscreen.1-1, g._c.0)
   if g._c.0 > rlines then g._c.max = g._c.0
   else g._c.max = rlines
 
   rline.1 = left('%PCMS Command History',67) 'Version' g._Version
   cursorline = g._c.max                             /* Start at top */
   i = 1                              /* Reset counter for next part */
   g._Cursortop = '2 7'
   g._Cursor = g._Cursortop
   'COMMAND MSG   *** Type over any command and hit ENTER to execute it'
   do until enter <> 0
      do i = 2 to lscreen.1-1 /* Define lines that hold the commands */
         ii = cursorline+-i+2
         if ii < 1 | g._c.ii = '' then
         rline.i = '%P'
         else rline.i = '%P'right(ii,3)'=%n'g._c.ii
      end
      enter = 0                                  /* No Enter key yet */
      do i = 1 to lscreen.1-1
         'COMMAND SET RESERVED' i 'NOHIGH' rline.i
      end
      'COMMAND SET RESERVED -1 NOHIGH' g._pfline
      'CURSOR SCREEN' g._Cursor  /* Set cursor where it wa last time */
      'COMMAND READ NOCHANGE TAG'             /* Get user's response */
      if rc <> 0 then leave
      pfkcmd = ''
 
      'COMMAND extract /cursor'; g._Cursor = cursor.1 '7'
      do while queued() > 0            /* Read them out of the stack */
         parse pull tag tagline        /* Get a line from the screen */
         upper tag
         select                                               /* Tag */
            when tag = 'ETK' then do
               enter = 1                    /* Enter key was pressed */
               rc = cursorline-cursor.1 + 2
               g._cmd.rc = g._c.rc
            end
            when tag = 'CMD' then nop                   /* Unset key */
            when tag = 'RES' then do               /* Modified field */
               parse var tagline trow tcol tval
               r = cursorline-trow+2
               if tval = '' then do      /* ERASE EOF or blanked out */
                  tval = g._o.r
                  enter = 0
               end
               else do
                  g._o.r = tval             /* Set as previous value */
                  g._cmd.r = tval    /* Remember to stack it on exit */
                  g._c.r = tval               /* Update it on screen */
                  rline.trow = '%P  'right(r, 3)'=%N'tval
               end
            end
            when word(tagline, 2) = 'FORWARD' then do
               if g._c.max > rlines then
               cursorline = max(cursorline - rlines + 1, 1)
               else cursorline = g._c.max
               g._Cursor = g._Cursortop
            end
            when word(tagline, 2) = 'TOP'      then do
               cursorline = g._c.max
               g._Cursor = g._Cursortop
            end
            when word(tagline, 2) = 'LAST' then do
               if g._c.max > rlines then cursorline = rlines - 1
               else cursorline = g._c.max
               g._Cursor = g._Cursortop
            end
            when word(tagline, 2) = 'BACKWARD' then do
               if g._c.max > rlines then
               cursorline = min(g._c.max, cursorline + rlines - 1)
               else cursorline = g._c.max
               g._Cursor = g._Cursortop
            end
            when word(tagline, 2) = 'CURSOR' then do
               if cursor.1 > 1 & cursor.1 <= rlines then
               cursorline = cursor.1+cursorline-2
               g._Cursor = g._Cursortop
            end
            when tag = 'PAK' | tag = 'PFK' then do
               parse var tagline . pfkcmd
            end
            otherwise                 /* We got something unexpected */
            say 'Unexpected tag' tag tagline
         end
      end
      rc = 0
      trace o                       /* Suppress trace in case rc < 0 */
      if pfkcmd <> '' then pfkcmd
      trace n                       /* Back to normal tracing please */
      if rc = 1 | rc = 6 then signal Quit
   end
 
/* All done, stack any charge command(s) and cursor line */
   do v = 1 to g._c.0
      if g._cmd.v <> '' then queue g._cmd.v
   end
   rc = 0
 
Quit:
   'COMMAND QUIT' rc
   exit rc
 
/*
   GetHistory -- Extract any command history buffers saved by DMSCMD
               (CMS command editing via a WAITRD nucleus extension).
   Buffers are returned in stem G._C.n; G._C.0 is of course the count.
 
*/
GetHistory: Procedure expose g.
   arg string
   g._c.0 = 0                                     /* No commands yet */
 
/*
Version 1 HISTORY buffer layout (defined in DMSCMD):
 
   HISTORYV Version
   HISTORYC Buffer cursor
   HISTORY1 First buffer address
   HISTORYZ Last buffer address
   HISTORYN # of buffers (same as CHISTORY)
   HISTORYL Length of a buffer (L'ONECMD)
   HISTORYX History buffers start here
 
   A history buffer comprises a halfword length + the actual data. The
   buffer itself is always full length, but the halfword means that we
   don't stack lines padded with spaces that weren't there before.
 
*/
   hvo = 0                                      /* Offset to version */
   hco = 4                                /* Offset to buffer cursor */
   h1o = 8                         /* Offset to first buffer address */
   hzo = 12                         /* Offset to last buffer address */
   hno = 16                                /* Offset to # of buffers */
   hlo = 20                          /* Offset to length of a buffer */
   hxo = 24                        /* Offset to first history buffer */
 
   numeric digits 20                     /* Don't blow up on X2D/D2X */
   address command 'MAKEBUF'
   address command 'NUCXMAP WAITRD (STACK FIFO'
   if rc <> 0 then signal NoNucext
   pull name entry userword origin bytes attributes
   if userword == '00000000' then signal NotAHistoryVersion
   address command 'DROPBUF'
   userword = x2d(userword)         /* We work with these in decimal */
 
/* Get the values out of the HISTORY block */
   hv = GetStorage(userword+hvo, 4, 'D')       /* Get version number */
   if hv <> 1 then signal UnknownVersion          /* Not one we know */
   hc = GetStorage(userword+hco, 4, 'D')         /* Get buffer count */
   if hc = 0 then signal NoHistory             /* No history buffers */
 
   h1 = GetStorage(userword+h1o, 4, 'D') /* Offset to a(first entry) */
   hz = GetStorage(userword+hzo, 4, 'D')  /* Offset to a(last entry) */
   hn = GetStorage(userword+hno, 4, 'D')   /* Offset to buffer count */
   hl = GetStorage(userword+hlo, 4, 'D')  /* Offset to buffer length */
   hx = GetStorage(userword+hxo, 4, 'D')
 
   rc = GetStorage(h1, 4, 'D')              /* Is first entry null?? */
   if rc = 0 then signal NoHistory      /* Yes, no history after all */
   rc = GetStorage(hc, 4, 'D')             /* Is cursor entry null?? */
   if rc = 0 then hc = h1      /* Yes, have never filled all buffers */
 
   do i = 1 to hn       /* Now run through the buffers and save them */
      c = GetStorage(hc, hl, 'C')                    /* Get an entry */
      l = c2d(right(c, 1, 2))                  /* Get command length */
      if l = 0 then leave                            /* Done if null */
      c = substr(c, 1, l)                      /* Get actual command */
      if strip(c, 'B', '00'x) = '' then leave       /* Done if empty */
      hc = hc+hl                              /* Point to next entry */
      if hc > hz then hc = h1          /* If past end, wrap to first */
      if string <> '' then                  /* If we're searching... */
      if index(translate(c), string) = 0 then /* ...and not found... */
      iterate                     /* Pretend this line doesn't exist */
      g._c.i = strip(c, 'T')        /* Save the actual command value */
      g._o.i = g._c.i      /* Save original value for possible reuse */
   end
   g._c.0 = i-1                   /* Set number of commands we found */
   return
 
/* Get storage: takes decimal address, length, and format code
   Codes are:
    D - decimal
    C - character (raw)
*/
GetStorage: Procedure
   arg location, length, format
   if length = '' then length = 4               /* Weird but be nice */
   v = storage(d2x(location), length)             /* Get raw storage */
   select                                       /* Format as desired */
      when format = 'D' then v = c2d(v)
      when format = 'C' then nop
      otherwise
      say 'Invalid format "'format'" passed to GetStorage'
      exit 32
   end
   return v
 
UnknownVersion:
   say 'HISTORY block version "'hv'" is not supported.'
   call QUIT 16
 
NoNucext:
   say 'No NUCEXT for WAITRD exists.'
   call QUIT rc
 
NotAHistoryVersion:
   say 'NUCEXT for WAITRD does not support command history.'
   call QUIT 24
 
NoHistory:
   say 'No command history exists yet.'
   call QUIT 8
 
BadParms:
   say 'Invalid parameter(s) "'parms'"'
   exit 24
 
BadLimit:
   say 'Invalid limit "'g._limit'" -- must be an integer'
   exit 24
 
BadOption:
   say 'Invalid option "'option'"'
   exit 24
 
Help:
   say 'HISTORY displays, stacks, or lets you view, edit, and' ,
     're-execute commands in'
   say 'your CMS command history, as saved by DMSCMD.'
   say ''
   say 'Syntax:'
   say '   HISTORY <( <Type | Stack>'
   say '              <Limit n>'
   say '              <STRing string>'
   say ''
   say 'If no arguments or options are specified, a full-screen' ,
     'panel displays saved'
   say 'CMS commands. You can type over these or just place' ,
     'the cursor on one and'
   say 'press ENTER to stack it for re-execution. If you modify more' ,
     'than one, or'
   say 'modify one or more and move the cusor to another line before' ,
     'hitting ENTER,'
   say 'multiple lines will be stacked, including the cursor line.'
   say ''
   say 'Options are:'
   say 'Fullscreen - means to display the saved commands. This is the' ,
     'default.'
   say 'Type       - means to display the saved commands.'
   say 'STAck      - means to stack the saved commands in the CMS stack.'
   say 'Limit n    - means to only return a maximum of n saved' ,
     'commands; typically'
   say '             this is used with "LIMIT 1", but a larger number' ,
     'can be specified.'
   say 'STRing     - specifies a string that must appear in any saved' ,
     'commands that'
   say '             are returned. This allows you to trivially' ,
     'filter the results.'
   say ''
   say '      Notes: 1) The comparison is case-insensitive'
   say '             2) The STRING option is ignored in full-screen' ,
     'mode.'
   say '             3) Saved commands are always full-length,' ,
     'padded with spaces.'
   say '                This means that, for example, a search for a' ,
     'command containing'
   say '                just three spaces will usually match all' ,
     'saved commands.'
   say ''
   say 'Due to XEDIT limitations, only the first 73 bytes of each' ,
     'command is shown in'
   say 'the full-screen display. The entire command WILL be typed or' ,
     'stacked, however,'
   say 'up to the CMS command line limit of 160 bytes.'
   say ''
   say 'Also try HELP CMS DMSCMD for more details about DMSCMD.'
   exit 0
