      subroutine cfdv32(ibm, vax, n)                                            
      integer   ibm(*), vax(*), n                                               
* ------------------------------------------------------------------ *          
*          author: Federico Carminati, CERN, Geneva.                 *          
*          restructured by Valery Garger, CNSF, Cornell University   *          
*                                                                    *          
*          This is a subroutine to convert from ibm double precision *          
*          floating point format (64 bits) to vax short floating     *          
*          point format (32 bits)                                    *          
*                                                                    *          
*          ex: call cfdv32(ibm, vax, n)                              *          
*                                                                    *          
*           ibm      an area of storage 64*n bits long in which      *          
*                    are stored one next to the other n 32 bits      *          
*                    ibm floating point numbers.                     *          
*           vax     an area of storage 32*n bit long which           *          
*                    contains n 32 bits vax floating point numbers.  *          
*                                                                    *          
*                    ibm and vax could be equivalenced, i.e. could   *          
*                    be located at the same space and vax must       *          
*                    occupy first half of the space.                 *          
*                                                                    *          
*           n        number of floating point numbers to convert     *          
*                                                                    *          
* ================================================================== *          
      logical btest                                                             
      data ibig /z ffff 7fff/                                                   
      data isma /z 0000 0080/                                                   
*                                                                               
      j = 1                                                                     
      do  while(j .le. n)                                                       
c                                                                               
c             check for exact 0                                                 
c                                                                               
        if(ibm(2*j-1) .eq. 0) then                                              
          vax(j) = 0                                                            
        else                                                                    
c                                                                               
c            get exponent and sign                                              
c                                                                               
          iexp  = ishft( ishft(ibm(2*j-1),1), -25)                              
          if    (btest(ibm(2*j-1),23)) then                                     
            left = 0                                                            
          elseif(btest(ibm(2*j-1),22)) then                                     
            left = 1                                                            
          elseif(btest(ibm(2*j-1),21)) then                                     
            left = 2                                                            
          elseif(btest(ibm(2*j-1),20)) then                                     
            left = 3                                                            
          else                                                                  
            left = 0                                                            
          endif                                                                 
*                                                                               
          iexp = iexp * 4 - left - 128                                          
          ibt = ishft(iand(ibm(2*j-1),2**24-1),left+1)                          
          ibt = ior(ibt,ishft(ibm(2*j),-31+left))+1                             
          ispill = ishft(ibt,-25)                                               
          ibt = ishft(ibt,-ispill-1)                                            
          iexp  = iexp+ispill                                                   
          if(iexp .le. 0) then                                                  
            ibt = isma                                                          
          elseif(iexp .gt. 255) then                                            
            ibt = ibig                                                          
          else                                                                  
            ibt = ior(ishft(ibt,16),ishft(ishft(ibt,9),-25))                    
            ibt = ior(ibt,ishft(iexp,7))                                        
          endif                                                                 
          if(btest(ibm(2*j-1),31)) ibt = ibset(ibt,15)                          
          vax(j) = ibt                                                          
        endif                                                                   
      j = j + 1                                                                 
      enddo                                                                     
      end                                                                       